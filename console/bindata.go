// Code generated by go-bindata.
// sources:
// tmpl/css/style.css
// tmpl/index.html
// tmpl/js/script.js
// DO NOT EDIT!

package console

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplCssStyleCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\xcd\x6e\xdb\x30\x10\x84\xcf\xe5\x53\x2c\x10\xf4\x12\x94\x8e\xed\x1a\x69\x21\x9d\xd2\x9f\xbc\x46\xc1\x9f\x95\x44\x68\xc5\x15\xd6\x54\xa5\x40\xf0\xbb\x17\x94\xe5\xaa\x40\xeb\x5e\xe7\x9b\x19\x2e\x86\x96\xfd\x1b\xcc\x0a\x00\x80\x42\x44\xdd\x60\xa8\x9b\x54\xc0\x61\xf7\x8c\x5d\x09\x4f\x8f\x50\x85\x09\x2a\x16\x48\x8d\x09\x50\x71\x4c\x8f\x4f\xea\xa2\x94\x6a\x52\x47\x1f\xe0\x8f\xfc\xef\xe8\x7e\xff\xbe\xcc\x96\x9d\xe3\x98\x4c\x88\x28\xba\xa2\x21\xf8\x59\xbd\xeb\x42\xd4\x7f\xfb\x7a\x13\x91\xf4\xad\xea\xc6\x3f\x1e\xf7\xfd\x54\x42\x76\x14\x85\x1e\xd1\xb6\x21\xe9\xb3\x13\x26\xb2\x46\xd6\x47\xc7\xe0\x53\x53\xc0\xe1\xd8\x4f\xb9\xeb\x1f\x46\x9d\xc4\xb8\x76\xb5\x5b\xe3\xda\x5a\x78\x88\x5e\x3b\x26\x96\x02\x1e\xbe\xbe\x7c\x3f\xbd\xbe\x94\x57\xcc\xe2\x51\x34\x61\x95\xef\xeb\x27\x38\x33\x05\x0f\x0f\xce\xb9\xbb\xed\xcd\xd0\xd9\xfb\xed\xa7\xe3\x67\xeb\xcc\x7f\xc3\x45\xc3\x3f\x51\xee\x57\x1c\xbe\x7d\x3a\x7d\x79\x5d\x96\x52\xbd\x60\xf6\xad\x13\x1d\x9e\xf3\x42\x0a\x20\x17\x54\xc4\x63\x61\x86\xc4\x59\xb8\xce\xb2\x2d\x7c\x46\x42\x97\xd0\xff\x10\x1e\x61\x5e\xbe\x51\x8f\xeb\xce\x96\xc9\x97\x17\xb5\x3b\x27\x09\xb1\x86\x19\xd6\x87\x6b\x41\x8c\x25\x5c\xd4\x2e\x0e\x9d\xcd\x17\xde\x88\x37\xd2\xb2\x98\x58\xe3\x82\x2d\x33\xa1\x89\x1b\xb7\x34\xe0\x1a\x24\xda\xe4\xce\xd4\x18\x93\x59\x48\x8b\x6f\x1b\x10\xf4\x59\xfc\x15\x00\x00\xff\xff\x43\xd7\x46\xd6\x8c\x02\x00\x00")

func tmplCssStyleCssBytes() ([]byte, error) {
	return bindataRead(
		_tmplCssStyleCss,
		"tmpl/css/style.css",
	)
}

func tmplCssStyleCss() (*asset, error) {
	bytes, err := tmplCssStyleCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/css/style.css", size: 652, mode: os.FileMode(420), modTime: time.Unix(1482667673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\x6d\x53\xe3\x38\x12\xfe\x9c\xfc\x8a\x5e\xdd\x5d\x15\x53\x73\x8e\x09\x59\x66\x58\xb0\x53\xc5\x40\x76\xe7\xa8\x30\x64\x26\x1c\xdc\xee\x37\xd9\x6e\xdb\x4a\x64\xc9\x48\x72\x5e\xe6\x6a\xff\xfb\x95\xfc\x92\x18\x08\x0c\xec\xed\x55\xcd\xf1\x21\x96\xad\xee\xe7\xe9\x57\xb5\x0a\xef\x87\xf3\xab\xb3\xeb\x5f\x27\x23\xf8\x78\x7d\x39\x1e\x76\xbd\xd4\x64\xdc\x3e\x90\x46\xc3\x6e\xc7\xcb\xd0\x50\x48\x8d\xc9\x1d\xbc\x2b\xd8\xc2\x27\x67\x52\x18\x14\xc6\xb9\x5e\xe7\x48\x20\xac\xde\x7c\x62\x70\x65\x5c\xab\x7b\x02\x61\x4a\x95\x46\xe3\xff\xf3\xfa\x67\xe7\x88\x80\x6b\x61\x0c\x33\x1c\x87\x1f\x8d\xc9\xe1\x74\xf2\x0f\xb8\x94\xe1\x1c\xce\xa4\xd0\x92\xa3\xe7\x56\x9b\xdd\x6e\xc7\xd3\xa1\x62\xb9\x01\xad\x42\x9f\xb8\x6e\x28\x23\xec\xcd\xee\x0a\x54\xeb\x5e\x28\x33\xb7\x5a\x3a\xfd\x5e\xff\xa0\xb7\xdf\xcb\x98\xe8\xcd\x34\x19\x7a\x6e\xa5\x35\x7c\xa9\x7e\xc6\x12\x45\x0d\x3a\xfd\xde\x41\xaf\xbf\x03\xa6\xdb\xf1\x7e\x70\x1c\x18\x53\x83\xda\x40\x28\xb3\x9c\x71\x8c\x80\x8a\x08\x32\x26\x58\xcc\x30\x82\xb3\xe9\x14\x1c\xc7\x52\x72\x26\xe6\xa0\x90\xfb\x44\x9b\x35\x47\x9d\x22\x1a\x02\xa9\xc2\xd8\x27\x36\x6e\xfa\xd8\x75\x33\xba\x0a\x23\xd1\x0b\xa4\x34\xda\x28\x9a\xdb\x17\x6b\xd0\xe6\x83\x3b\xe8\x0d\x7a\xef\xdc\x50\xeb\xed\xb7\xd2\xb2\x50\x6b\x02\x4c\x18\x4c\x14\x33\x6b\x9f\xe8\x94\x0e\x8e\x7e\x74\xfa\x77\x47\xd9\xf5\xc5\xd5\xe9\x74\x75\x34\xeb\x9f\x16\x6f\xe9\xe1\xed\xf9\x8d\x98\xb0\x03\x3e\xff\x39\x5e\x2e\x47\xa7\xf4\x28\x3d\x3f\x8f\x66\xbf\xf1\x7c\x8c\xc9\x2a\x9d\xdd\x5c\x8e\xfa\x71\x32\xbb\x9d\xfc\x92\xcd\xbf\xea\xf7\x04\x42\x25\xb5\x96\x8a\x25\x4c\xf8\x84\x0a\x29\xd6\x99\x2c\x34\xd9\x78\x7f\x95\x1b\x26\x05\xe5\x60\x52\xcc\xf0\x7f\xed\xab\x53\xb2\x3c\xe7\x71\x3c\xbe\x3d\xf8\xb4\xdf\xe7\x97\x77\x33\x3a\xff\x30\x5f\x0d\xb8\x7b\xf9\xd3\x88\xa6\xc5\x32\x9f\xc6\xf8\x69\x71\xf3\x6e\x70\x71\x88\x5f\xc5\xa0\xf8\xed\x2b\xcd\xaf\xf7\x8b\xf7\xa3\x5f\xf5\xbf\x2e\x67\x9f\x6f\xde\xee\x8f\xc4\xa1\xfa\xb6\xc7\xcf\xe6\xfb\x82\x2e\xe8\xb4\x2a\xae\x2a\x14\xed\x4a\x7b\xad\xeb\xb3\x87\x59\x9e\xed\x74\x79\x3f\x9b\x06\x17\xe7\xa3\x8f\x8c\xf2\x38\x2b\x3e\x7c\xf8\x3c\x79\x77\xfa\xe3\x67\x95\xab\xbb\xc3\xab\x9b\xf8\x76\xf0\x7e\xf2\xe5\xcb\x60\x76\x38\x1a\xdf\xad\xb4\xee\xaf\x6f\xee\xae\x8c\xc0\x5c\x7c\xbc\x99\xfc\x44\x2f\xde\xaf\xa6\x4f\xbb\x7c\xaf\xd6\x6b\x4f\xcc\x3a\xc7\xba\x8d\xb7\xce\x92\xca\xc1\x99\xae\x15\x1e\x77\xca\xee\x92\x68\x81\x95\xf9\xac\x4a\xc4\xa6\xbc\x94\x2a\x93\xbc\x39\x5d\x04\xcd\xd0\x27\x0b\x86\xcb\x5c\x2a\xd3\x3a\x53\x96\x2c\x32\xa9\x1f\xe1\x82\x85\xe8\x94\x2f\x7f\x07\x26\x98\x61\x94\x3b\x3a\xa4\x1c\xfd\xbe\x45\xf9\x86\x0b\xc3\x6e\xe7\xaf\x7b\x10\xc9\xb0\xc8\x50\x18\x78\xd3\x53\x48\xa3\xf5\x5e\x5c\x88\xd0\x96\xf8\xde\x1b\xf8\x77\xb7\xd3\x01\x58\x50\x05\x4b\x0d\x3e\x08\x5c\xc2\x2d\x06\x53\x19\xce\xd1\xec\x91\xa5\x4d\x2d\x81\xb7\xc0\x65\x48\xad\x46\x2f\x95\xda\xc0\x5b\x20\x2e\x86\xa9\x24\x6f\x4e\x4a\xf5\xa5\xee\x49\x91\xa1\xd6\x34\x41\xf0\x61\x03\x8f\x0d\x7e\x4d\xb1\x15\xb9\x98\x5e\x7d\xea\xe5\xf6\xac\xdc\xc3\x05\x0a\xd3\x8b\xa8\xa1\x35\x5a\x07\x80\xcb\xe4\x0b\xde\x15\xa8\xcd\x5e\xad\xf3\xe6\xc4\x6e\xd9\xbf\x52\xe6\xf7\x93\x6e\xb7\xd3\xe9\xfc\x01\xbb\xb9\x4c\x5e\x68\x76\x8d\xff\x62\xa3\x97\x8a\x19\x1c\xcb\xe4\x69\x93\x3b\xbf\x97\xd2\xdb\x22\xf2\xdc\x6a\xd6\x74\xbb\x5e\x20\xa3\xf5\xb0\x6e\xc7\xa9\xa1\xe1\xdc\x9e\x3e\x10\x4a\x5e\x64\x42\x83\x14\x90\xc9\x80\x71\x84\x60\x0d\x19\x9d\x33\x91\x80\x14\x08\x71\xc1\x79\x55\x1e\x65\xcf\x5a\x15\x69\x52\x54\x90\x52\x1e\xd7\x1b\x55\xd3\x46\x6c\x01\x21\xa7\x5a\xfb\xc4\x16\x19\x65\x02\x95\x13\xf3\x82\x45\x4d\xd1\x11\x28\x0b\xd4\x27\x39\x8d\x22\x26\x92\x63\xe8\x1f\xe6\xab\x93\xaa\xcc\x5a\xea\x4a\x2e\xcb\x6f\x0f\x30\xb9\x93\x45\x4e\xff\xc0\x9a\xec\xf0\xa4\x5a\x95\x43\xae\x12\xbe\x27\x9d\x53\x81\x1c\xca\x5f\x27\x57\x2c\xa3\x6a\x4d\xa0\x12\x7b\x2c\xe7\xd8\x18\x31\x91\xd4\x38\x9d\x8e\x97\x0e\xee\x0b\x94\x43\x94\x3c\x35\x62\xd3\x41\x83\xec\x46\x6c\xf1\x24\x8b\x4d\x00\x01\x16\xf9\x24\x62\x8b\x5f\x94\x2c\xf2\x1a\x61\x13\x17\xb9\x40\x15\x73\xb9\x3c\xa6\x85\x91\x1b\x6b\xea\x47\xc7\x2b\x78\x03\xc8\x99\x36\x4e\x62\x21\x2a\xc0\xa4\x8d\xd6\xe8\xb5\x34\xdd\x82\xdf\x47\x7b\xde\xd2\x58\x4a\x83\x6a\x1b\x0e\x4e\x03\xe4\x0f\x92\xe7\x18\x99\x1f\x43\xff\x6f\x27\x5b\x3e\x8f\x89\xbc\x68\x4e\x8a\x30\xc5\x70\x1e\xc8\x55\x65\x60\x98\xce\x4f\x0b\x23\xa7\xa1\x92\x9c\x13\x28\x37\x31\xf2\x89\x51\x05\x12\x18\x82\xdd\x04\x5d\xee\x36\xa4\x6e\xc9\xba\xb1\x21\x28\x8c\x91\xa2\x06\xaf\x5e\x48\x63\x75\x60\x04\x04\x46\x6c\x33\x6d\x68\xc0\x44\x84\x2b\x9f\xec\x57\xfc\x81\x11\x67\x1c\xa9\x7a\x18\xf1\x98\x4b\x6a\x8e\x15\x4b\x52\xb3\x75\xc4\xd3\x39\x15\x0d\x76\xc2\xd7\x79\xca\x42\x29\x60\xb3\x72\x14\x66\x72\x81\x8e\x66\x89\x28\x4f\xec\x9c\x8a\x21\x94\xf8\xdb\xa2\xa8\x4c\x7c\x5c\x18\xdb\x65\xb5\xea\x74\x5b\xdf\xbe\xd9\x05\x94\xa3\x32\x50\xfe\x3a\x4c\xc4\x72\xe3\x48\xc4\x74\xce\xe9\xfa\x58\x48\x81\x95\xcb\xa5\xd0\x25\x6a\x8d\x22\x41\x32\xbc\x45\x1e\xca\x0c\x7b\x5b\xae\xa7\x48\xe1\x45\xbd\xa7\x0d\x35\xe5\x84\x7f\x49\xeb\xfd\xf7\x9d\x77\x7d\x3d\x81\x73\x34\x94\x71\xfd\xba\x86\x1b\x76\x1b\x68\xbb\x6f\x03\x63\x98\xc2\x90\xe6\x4f\x84\x6e\x47\xa0\x75\x11\x86\x68\x27\x6d\x63\x25\x80\xa7\x8d\x92\x22\x19\x56\xa5\x52\xa1\x36\x11\x81\xba\x22\x3c\xb7\x16\x82\xb6\x94\xaa\xc6\xce\x56\x6c\x53\xef\x5b\x57\x9a\xc6\x6d\x75\xbc\xa0\x0b\x10\x74\xe1\x18\x1a\x68\xd2\xb2\x83\xb3\x8d\xc5\xa1\x61\x0b\xdb\x4c\x1e\xad\xaf\x04\x7f\x31\x34\x68\xe8\xc0\x8e\x12\xc7\xc8\x24\xb1\x2e\x1b\x1a\x90\x61\x3d\x00\x3d\x97\x0e\x3d\x97\xb3\x7b\xa0\x0f\x41\x74\x2e\x85\xc6\xdd\x28\xd5\xde\x43\x98\xce\x23\x94\x1c\x95\x66\xbb\x4d\x99\x54\x5b\x2f\x30\xc5\x4e\xd7\x1d\x00\x63\x99\x3c\x54\xae\x0e\xbd\x7b\xd9\xaf\x23\x65\x68\xe0\x34\x23\xa9\x45\xb5\xa9\x8f\x56\xd4\x5a\x1a\xb6\xa6\x20\xa6\x11\x02\x13\x50\x07\x7b\xab\x0d\xe0\xe5\x0a\x4b\xfd\x34\xda\xe4\xd8\x73\x73\x85\x2d\x8a\x76\x8e\x1f\x32\x36\x21\xde\x45\xf9\x34\x51\xad\xf5\x2c\x53\xa7\x4d\xb4\xc9\xc2\x6b\x78\x1a\xa5\x9d\x34\xb0\xdb\xa3\x32\x53\xaf\x21\xb1\x0a\xcf\x13\xec\xe8\x91\xfa\xd3\xce\xa3\xb5\xdb\xbd\xb7\xfa\x7f\xb8\x61\x8c\x56\x18\x16\xf6\x8e\x08\x63\x99\xbc\xf2\xa4\xbb\x77\xb5\x18\xdb\xe8\xff\x29\xd7\x0a\x8b\xf4\x9d\x5e\x29\xc6\x32\xf9\x2e\x6e\x15\xed\x60\xff\xe9\x37\x8a\xf2\x68\xfb\x23\xb7\x89\xa6\xf4\xbb\x5d\xcf\xad\x2e\xff\x9e\x5b\xfd\x03\xea\x3f\x01\x00\x00\xff\xff\xba\xd5\xa1\xe0\x98\x12\x00\x00")

func tmplIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplIndexHtml,
		"tmpl/index.html",
	)
}

func tmplIndexHtml() (*asset, error) {
	bytes, err := tmplIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/index.html", size: 4760, mode: os.FileMode(420), modTime: time.Unix(1482667945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplJsScriptJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x57\x5f\x73\xdb\x36\x12\x7f\xd7\xa7\xc0\xe0\x3c\x26\x19\x59\xb4\x72\xe3\x7b\x38\xc9\xb2\x2f\xe7\xb4\x4d\x3a\x4e\x33\x13\xe7\xa5\x95\x94\x0e\x4c\xac\x28\xd4\x10\xa0\x00\x60\x14\x27\xca\x77\xef\x80\x20\x45\x10\x94\x14\xb7\xd3\x97\xc4\xc2\xfe\x7e\xfb\x1f\xbb\xe0\x27\xa2\x50\x26\x0b\x61\xd0\x04\x0d\xc7\x3d\xfb\x53\xc1\xc7\x02\xb4\xd1\x68\x82\xa6\xf3\x71\xaf\x77\x12\x53\x99\x15\x2b\x10\x26\x49\x15\x10\xfa\x18\x2f\x0a\x91\x19\x26\x45\x9c\xa0\xaf\x3d\x84\x10\x3a\x89\xf1\xbf\xee\x8d\xb8\xe1\x40\xd4\x8d\x14\x5a\x72\xc0\x49\x9a\x71\x96\x3d\x74\xc1\x35\x21\x57\xb2\x58\x37\x68\x58\xad\xcd\x63\x9c\x8c\x5b\x18\xc3\x14\x64\x64\x8d\x93\x74\xc9\x28\x84\xd2\x25\xad\x7c\xb5\x72\xb3\xe2\x31\xc6\x7b\x10\x7a\x2d\x85\x86\x23\x90\x35\x28\xcd\x8e\x2a\xe1\x32\xef\x48\xbf\x25\xe3\x5e\x27\xf8\xdb\x12\xf8\x94\xc0\x1d\xb2\x15\xb4\xd5\x58\x6a\xad\x99\x88\x89\x4c\x81\xcd\xfc\x8d\x2d\xd1\x4e\x91\x02\x53\x28\xe1\xea\xd6\xef\x8f\x7b\xdf\x3c\x8a\x5e\xca\xcd\x4b\x30\x84\x71\x1d\x33\x5a\x33\x34\x98\x77\x72\x73\x07\x1c\x32\x03\xd4\x0a\x9c\x49\x2e\xf3\x1a\x5c\x97\x7d\xca\xe8\x3c\x09\x74\x76\xd8\x4e\xed\x49\x8c\x53\xce\xb4\x19\x94\x11\x0d\x98\x81\x15\xb6\x3d\xb2\x92\x9f\xe0\x86\x13\xad\xe3\x48\x57\xa4\xdf\x95\xdc\x44\xce\xa8\x4d\x81\x92\x9b\x41\x65\x70\x80\xfb\x8c\x26\x29\xa1\xf4\x00\xc5\xf7\x24\x07\x73\x23\xb9\x54\xff\x7f\xbc\x33\xc4\x14\x3a\xd6\xe5\x7f\x37\x92\x82\xf5\xa9\x8c\x89\x2d\x90\x77\x8c\x26\x13\xf4\xef\xe1\x10\x6d\xb7\x28\x3c\x7c\xee\x17\xa6\xca\x29\xd6\x45\x96\x81\xd6\xb8\x2a\x09\x02\xae\x61\x8f\xca\x8b\xe1\xc5\x3e\x36\x25\x22\x07\xd5\x26\x77\x51\x1b\xa2\x04\x13\x79\x0d\x6b\x45\xe8\x55\xe4\x0f\x2d\x85\x7f\xc3\x9a\xcb\xb0\x20\x14\xde\x16\x26\x7e\x3e\x1c\xd6\x5d\xc8\x16\x25\x3e\xad\xfb\x3d\xad\xba\x1a\x28\x3a\x3d\x45\x07\x44\xa9\x20\xab\x32\x1c\x8c\x93\xc6\x4d\x0a\x1c\x0c\xb4\x39\x53\xbc\x23\xe1\x79\xed\x77\xcb\x70\x25\xdf\x59\xab\x7e\x7f\xdf\x44\x05\x9c\x62\x8b\x6c\x94\xef\xd1\x9d\x56\xb4\xc9\x04\x2d\x08\xd7\xf0\x3d\x85\xee\xf0\xb8\x4a\xb2\xfa\xb8\xee\xf8\x6c\x0f\xd3\x42\xf1\xa7\xf9\x6d\xd1\x41\x52\xbc\x39\x8a\x26\xe8\xe7\xbb\xb7\xbf\xa4\xda\x28\x26\x72\xb6\x78\xac\xeb\x54\x4a\xcf\x50\x21\x28\x2c\x98\x00\x7a\x86\x2e\xaa\x5b\xe9\xd8\x2e\xf1\x07\xe9\x4e\x7c\x90\x5f\x97\x63\x3f\xbd\x92\x76\xd8\x3b\x3a\x97\xf9\x61\xcb\x05\x3f\xec\xb7\xbb\x26\x68\x12\xb4\x5c\x73\x7b\xc6\x7b\xfa\x99\x18\xa3\xe2\x28\xb3\xf7\x3f\x3a\x43\x11\xe1\xa0\x0c\x2a\xff\x1d\x44\xa8\x7f\xe8\xd6\x27\xc9\x3e\x5d\xf6\x6e\xbc\x16\xd5\xd5\x68\xc4\x8e\x52\x4f\xf1\x4a\x41\x9b\xdf\x5a\x25\x7e\x91\xd2\x15\x98\xa5\xa4\xa8\x8f\x30\xc2\xa8\x8f\x5a\xb2\x35\x31\x4b\x4f\x51\x67\x27\xe9\x47\x61\xc8\xe7\x57\x2c\x5f\x72\x96\x2f\x4d\x3d\x67\x93\x80\xd3\xde\x52\x5d\x92\x93\xb7\x59\xc1\xe2\x0a\x49\x95\xb8\xcd\xf1\x56\x59\x88\xe7\x32\x4f\xdc\xbc\x6d\x8d\xa3\x77\xce\xe1\xd6\x38\xfa\x0b\x95\xb6\x50\x46\xd1\xa4\xb3\xcc\x1a\x31\x25\x06\x0c\xb3\x63\xa2\x2c\x75\xa1\x14\x08\xf3\x9e\xad\xc0\x07\x2d\x0a\xce\x6f\xcb\xae\xdc\xc1\x6d\x3d\x2e\x07\xdd\x92\x7c\xaf\x5c\xe3\x6a\x8b\x36\x0b\xaf\x8a\xa2\x49\x54\xf0\x38\x21\xeb\x35\x08\x1a\x47\x97\x9c\x21\x46\x27\xd8\xdf\x5f\xb6\x43\x99\xb5\x16\x61\x54\xb6\xf0\x04\x07\x4b\x11\x05\xbf\x8f\x36\xb5\x53\x24\x45\xf9\x88\x98\x60\x7f\x9f\x37\x96\x92\x71\xb5\x4b\xca\x39\x88\xaf\xac\xa4\x4e\x50\x1f\x45\x97\xe7\x9c\x5d\x55\xeb\x36\x7c\x11\x94\x67\x99\x7d\xac\xbc\xe5\xf4\x56\xe6\xba\x4e\xb2\xce\x94\xe4\xbc\x8a\xf9\xa5\xdc\x88\x38\x58\xbe\x1b\xc5\x0c\xdc\xca\x3c\x36\xf0\xd9\xf8\x9d\xf0\x0f\xd4\xcf\xaa\x0c\xb2\xef\x5e\x48\x7e\xe6\xf7\x67\xf7\x78\xf4\x87\x23\xb5\x27\x5e\x98\x4d\x9c\x6d\x8a\x17\x27\x97\xf9\x6b\x03\xab\x3b\xf6\xc5\x86\x1a\xb6\x09\xe2\x0c\x27\xa9\x66\x5f\x76\x61\xdb\x67\x83\xcf\xb9\x42\xff\x19\xb6\x1f\x83\x51\xa8\x61\xb4\x60\x4a\x9b\xa8\x7e\x45\xed\x9e\x86\xed\xf7\x58\xb7\x52\x95\x56\x6b\xd1\xfa\x95\x2d\x1f\x5e\x14\x46\xde\x95\x40\x9c\xa4\x4c\xc7\xd1\x28\x5b\x42\xf6\x00\x34\x4a\xc2\x07\x29\x65\x9f\x7e\x6a\xf7\xbb\xb3\xf0\x5e\xae\xe3\xfd\xf2\x1c\x4c\x3c\xac\x61\xaf\xc0\x8e\x8f\x23\x9e\x36\x99\xee\xba\x79\x2b\xf3\xbf\xe1\xa9\xeb\x8d\xfd\x5e\x3a\xd9\x53\x3d\x0c\x1b\xd6\x2b\x77\xe6\xce\x6d\xbb\xa2\x09\x12\xb0\x41\x2f\x89\x81\x03\x83\xcb\x03\x5b\xdb\x0e\x69\x3b\xfc\x1c\xa3\xfe\x2e\x86\x38\x80\xbd\x91\xc2\x2c\x4b\xdc\xf3\x2e\x38\xc0\xfe\x58\x70\xfe\x2b\x10\xe5\xd4\xa2\xff\xa1\x23\xd8\x57\xb2\x50\xda\x01\x47\x47\x60\x6f\x98\x28\x0c\x3c\x01\x78\x07\x99\x14\x74\x77\x81\xaa\xe1\x53\x87\x1f\x7c\x2d\x04\x6b\xc5\xdf\x1b\xf6\xef\x66\x63\xac\x39\xc9\x20\x3e\x3f\x3d\xcf\xcf\x50\x74\x4a\x56\xeb\x71\xd9\xf8\xd5\xf1\xa5\x3b\xe6\xa6\x75\x7a\xe5\x4e\x73\x7b\xda\x72\xa6\xad\x33\xc6\xf1\x6c\x56\x4c\xc9\xe0\xcb\x8b\xc1\x6f\xc3\xc1\x7f\xe7\x5f\x2f\xbe\x6d\x67\xb3\xe9\x87\x62\xbe\x9d\x7e\x98\xcd\xf0\x3c\x79\x86\xe3\x99\x7e\x36\x4a\xae\xb7\xb3\xfb\xd8\xa8\x02\xb6\xe5\x30\xdd\x8a\x82\xf3\x64\x76\xbf\x1d\x5c\xcf\x68\x3f\xbe\x1e\xcd\xd2\x19\x7d\x96\x5c\xc7\xd7\xa3\x29\xfc\x30\x9f\xf6\x67\x83\xb9\x95\x24\xd7\x89\x75\x65\xf7\x95\xb7\x22\x26\x5b\xfa\xfd\x5a\xb6\x10\xb7\x0b\x32\x12\xc5\xea\x1e\x54\xd4\x7c\x56\xda\x0b\x70\xfe\x01\x9f\xa7\xc6\x6e\x56\x47\xf5\xb9\x3b\xcc\xe8\xe4\x28\xc6\x4d\xb8\xd2\xc6\x03\x3c\x7a\x06\xd0\xbe\xef\x8f\x80\xe1\x1e\x76\x21\xa9\x17\xd0\x4b\x37\x9a\xf4\x1c\x75\xa7\x52\x7c\x2f\x25\x07\x22\x3c\xcd\xbe\x2e\x9b\xdf\xa7\x68\xb1\x38\x5f\x45\xf8\x19\x15\x5d\xea\x35\x11\xf5\x52\xb0\x3b\xc0\x12\xed\xf6\x2c\x17\x42\xa9\xdb\xad\x03\x8b\xbb\x8a\xbc\x8f\xec\x3f\x03\x00\x00\xff\xff\x1b\x17\xc5\x73\xf6\x10\x00\x00")

func tmplJsScriptJsBytes() ([]byte, error) {
	return bindataRead(
		_tmplJsScriptJs,
		"tmpl/js/script.js",
	)
}

func tmplJsScriptJs() (*asset, error) {
	bytes, err := tmplJsScriptJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/js/script.js", size: 4342, mode: os.FileMode(420), modTime: time.Unix(1482667673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/css/style.css": tmplCssStyleCss,
	"tmpl/index.html": tmplIndexHtml,
	"tmpl/js/script.js": tmplJsScriptJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"style.css": &bintree{tmplCssStyleCss, map[string]*bintree{}},
		}},
		"index.html": &bintree{tmplIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"script.js": &bintree{tmplJsScriptJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

